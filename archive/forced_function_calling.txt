# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

%pip install --upgrade --quiet google-genai arxiv

import IPython

app = IPython.Application.instance()
app.kernel.do_shutdown(True)

import sys

if "google.colab" in sys.modules:
    from google.colab import auth

    auth.authenticate_user()

import os

PROJECT_ID = "[your-project-id]"  # @param {type: "string", placeholder: "[your-project-id]", isTemplate: true}
if not PROJECT_ID or PROJECT_ID == "[your-project-id]":
    PROJECT_ID = str(os.environ.get("GOOGLE_CLOUD_PROJECT"))

LOCATION = os.environ.get("GOOGLE_CLOUD_REGION", "us-central1")

from google import genai

client = genai.Client(vertexai=True, project=PROJECT_ID, location=LOCATION)

from IPython.display import Markdown, display
import arxiv
from google.genai.types import (
    FunctionCallingConfig,
    FunctionCallingConfigMode,
    FunctionDeclaration,
    GenerateContentConfig,
    Part,
    Schema,
    Tool,
    ToolConfig,
    Type,
)

MODEL_ID = "gemini-2.0-flash-001"  # @param {type: "string"}

search_arxiv = FunctionDeclaration(
    name="search_arxiv",
    description="Search for articles and publications in arXiv",
    parameters=Schema(
        type=Type.OBJECT,
        properties={
            "query": Schema(
                type=Type.STRING, description="Query to search for in arXiv"
            )
        },
    ),
)

search_tool = Tool(
    function_declarations=[
        search_arxiv,
    ],
)
config = GenerateContentConfig(temperature=0, tools=[search_tool])

config.tool_config = ToolConfig(
    function_calling_config=FunctionCallingConfig(
        mode=FunctionCallingConfigMode.AUTO,  # The default model behavior. The model decides whether to predict a function call or a natural language response.
    )
)

prompt = "Explain the Schrodinger equation in a few sentences and give me papers from arXiv to learn more."

response = client.models.generate_content(
    model=MODEL_ID,
    contents=prompt,
    config=config,
)

display(Markdown(response.candidates[0].content.parts[0].text))

config.tool_config = ToolConfig(
    function_calling_config=FunctionCallingConfig(
        mode=FunctionCallingConfigMode.ANY,  # ANY mode forces the model to predict a function call from a subset of function names.
        allowed_function_names=[
            "search_arxiv"
        ],  # Allowed functions to call when mode is ANY, if empty any one of the provided functions will be called.
    )
)

prompt = "Explain the Schrodinger equation in a few sentences and give me papers from arXiv to learn more"

response = client.models.generate_content(
    model=MODEL_ID,
    contents=prompt,
    config=config,
)

response.function_calls[0]

params = {}
for key, value in response.function_calls[0].args.items():
    params[key] = value
params

if response.function_calls[0].name == "search_arxiv":
    arxiv_client = arxiv.Client()

    search = arxiv.Search(
        query=params["query"], max_results=10, sort_by=arxiv.SortCriterion.SubmittedDate
    )

    results = arxiv_client.results(search)
    results = str([r for r in results])

results[:1000]

config.tool_config = None
response = client.models.generate_content(
    model=MODEL_ID,
    contents=[
        prompt,
        Part.from_function_call(
            name=response.function_calls[0].name, args=response.function_calls[0].args
        ),  # Function call response
        Part.from_function_response(
            name="search_arxiv",
            response={
                "content": results,  # Return the API response to the Gemini model
            },
        ),
    ],
    config=config,
)

display(Markdown(response.text))

config.tool_config = ToolConfig(
    function_calling_config=FunctionCallingConfig(
        mode=FunctionCallingConfigMode.NONE,  # NONE mode instructs the model to not predict function calls. Equivalent to a model request without any function declarations.
    )
)

prompt = "Explain the Schrodinger equation in a few sentences and give me papers from arXiv to learn more"

response = client.models.generate_content(
    model=MODEL_ID,
    contents=prompt,
    config=config,
)

display(Markdown(response.text))
